#!/usr/bin/env node

/**
 * Module dependencies.
 */
const dotenv = require("dotenv");
dotenv.config();
var app = require("../app");
var debug = require("debug")("thestorynest-backend:server");
var http = require("http");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: process.env.ORIGIN,
    methods: ['GET','POST']
  },
});

let users = [];

io.on("connection", (socket) => {
  const user = {socket};
  socket.on('data', (data) => {
    //console.log('user id '+data.id)
      user.id = data.id;
      users.push(user);
  })

  socket.on('like', (userId, story) => {
    let u = users.filter((user)=>{
      return user.id === story.author;
    })
    if(u.length > 0){ 
      u[0].socket.emit('notification', {
      message : `'${userId}' upvoted your story '${story.title}'`
    })
      console.log('message sent successfully');
    }else{
      console.log('user not connected to send the notification');
    }
    
  })

  socket.on("disconnect", () => {
    let index = users.findIndex(u => u.id === user.id);
    users.splice(index,1);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`server is listening to ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

//module.exports = { server }
